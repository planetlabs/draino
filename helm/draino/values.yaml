dryRun: false

extraArgs: {}

conditions: {}

replicaCount: 1

image:
  repository: planetlabs/draino
  tag: e0d5277
  pullPolicy: IfNotPresent

resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

# Add these annotations to all pods
podAnnotations: {}
  # name: value
  # prometheus.io/scrape: 'true'
  # prometheus.io/port: '9102'

# Add these labels to all pods
podLabels: {}
  # name: value

rbac:
  create: true
  serviceAccountName:

nodeSelector: {}

tolerations: []

affinity: {}

# Security Context policies for pods
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
securityContext:
  fsGroup: 101
  runAsGroup: 101
  runAsNonRoot: true
  runAsUser: 100

containerSecurityContext:
  privileged: false
  readOnlyRootFilesystem: true

# service:
#   type: ClusterIP
#   port: 9121
#   annotations: {}
#   labels: {}

serviceMonitor:
  # When set true then use a ServiceMonitor to configure scraping
  enabled: false
  # Set labels for the ServiceMonitor, use this to define your scrape label for Prometheus Operator
  # See: https://github.com/prometheus-community/helm-charts/blob/b68322246d01254aa6cc7d06c69034062c2157b7/charts/kube-prometheus-stack/values.yaml#L1825
  labels: {}
  #  prometheus: kube-prometheus
  # Set the namespace the ServiceMonitor should be deployed
  # namespace: monitoring
  # Set how frequently Prometheus should scrape
  # interval: 15s
  # Set timeout for scrape
  # timeout: 10s
  # Set of labels to transfer on the Kubernetes Service onto the target.
  # targetLabels: []
  # metricRelabelings: []
